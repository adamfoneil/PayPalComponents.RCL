@namespace PayPalComponents
@inject Blazored.LocalStorage.ILocalStorageService Storage
@using PayPalComponents.Models;

<div>
    <RadzenDropDown @bind-Value="@environment" Data="@(DropDownData.FromEnum<PayPalEnvironment>())" ValueProperty="Value" class="mb-3"/>
</div>

<div>
    <RadzenButton Icon="add_circle_outline" Click="AddValue" Text="Add Value" class="my-3" />
</div>

<RadzenDataGrid Data="fields" EditMode="DataGridEditMode.Single" @ref="grid">
    <Columns>
        <RadzenDataGridColumn TItem="FormData" Title="Field Name" Width="25%">
            <Template>
                <span>@context.Name</span>
            </Template>
            <EditTemplate>
                <RadzenTextBox @bind-Value="@context.Name" MaxLength="40" class="w-100"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FormData" Title="Value" Width="75%">
            <Template>
                <span>@context.Value</span>
            </Template>
            <EditTemplate>
                <RadzenTextBox @bind-Value="@context.Value" MaxLength="255" class="w-100" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenGridColumn TItem="FormData">
            <Template>
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(context))" @onclick:stopPropagation="true"/>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(context))" @onclick:stopPropagation="true"/>
            </Template>
            <EditTemplate>

            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenDataGrid>

<PayNowButton Environment="@environment" class="my-3"/>

@code {
    RadzenDataGrid<FormData>? grid;
    PayPalEnvironment environment = PayPalEnvironment.Sandbox;
    List<FormData> fields = new();    

    protected override async Task OnAfterRenderAsync(bool firstRenter)
    {
        var settings = await Storage.GetItemAsync<Settings>("default") ?? new Settings()
        {
            BusinessEmail = "your PayPal account email",
            NotifyUrl = "Ngrok callback url"
        };

        fields = settings.ToEnumerable((name, val) => new FormData() { Name = name, Value = val }).ToList();

        StateHasChanged();
    }

    void AddValue() => grid?.InsertRow(new FormData());    

    void EditRow(FormData args) => grid?.EditRow(args);

    void DeleteRow(FormData args) => fields.Remove(args);
}